<?xml version="1.0" encoding="UTF-8"?>
<project name="ch13_ex1_email" default="war" basedir=".">
    <description>Builds and deploys the Email List JPA application.</description>
    
    <!-- Properties -->
    <property name="src.dir" value="src/java"/>
    <property name="web.dir" value="web"/>
    <property name="lib.dir" value="${web.dir}/WEB-INF/lib"/>
    <property name="conf.dir" value="src/conf"/>
    <property name="build.dir" value="build"/>
    <property name="build.classes.dir" value="${build.dir}/WEB-INF/classes"/>
    <property name="build.web.dir" value="${build.dir}"/>
    <property name="dist.dir" value="dist"/>
    <property name="war.name" value="ch13_ex1_email.war"/>
    <property name="deploy.dir" value="D:/Code/Năm 3/ltw/apache-tomcat-9.0.108/webapps"/>
    
    <!-- Load build.properties nếu có (cho Docker build) -->
    <property file="build.properties"/>
    
    <!-- Default servlet.lib path cho local development -->
    <property name="servlet.lib" value="D:/Code/Năm 3/ltw/apache-tomcat-9.0.108/lib/servlet-api.jar"/>
    
    <!-- Classpath -->
    <path id="compile.classpath">
        <fileset dir="${lib.dir}">
            <include name="*.jar"/>
        </fileset>
        <pathelement location="${servlet.lib}"/>
    </path>
    
    <!-- Init target -->
    <target name="init">
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${build.classes.dir}"/>
        <mkdir dir="${dist.dir}"/>
    </target>
    
    <!-- Clean target -->
    <target name="clean" description="Remove build and dist directories">
        <delete dir="${build.dir}"/>
        <delete dir="${dist.dir}"/>
        <delete file="${deploy.dir}/${war.name}"/>
    </target>
    
    <!-- Compile target -->
    <target name="compile" depends="init" description="Compile Java sources">
        <javac srcdir="${src.dir}" 
               destdir="${build.classes.dir}"
               classpathref="compile.classpath"
               debug="true"
               source="1.8"
               target="1.8"
               encoding="UTF-8"
               includeAntRuntime="false">
        </javac>
        
        <!-- Copy configuration files -->
        <copy todir="${build.classes.dir}">
            <fileset dir="${conf.dir}">
                <include name="**/*.xml"/>
                <include name="**/*.properties"/>
            </fileset>
        </copy>
    </target>
    
    <!-- War target -->
    <target name="war" depends="compile" description="Create WAR file and deploy">
        <!-- Copy web files -->
        <copy todir="${build.web.dir}">
            <fileset dir="${web.dir}">
                <exclude name="WEB-INF/classes/**"/>
            </fileset>
        </copy>
        
        <!-- Create WAR file -->
        <war destfile="${dist.dir}/${war.name}" webxml="${web.dir}/WEB-INF/web.xml">
            <fileset dir="${build.web.dir}">
                <exclude name="WEB-INF/web.xml"/>
            </fileset>
            <classes dir="${build.classes.dir}"/>
            <lib dir="${lib.dir}">
                <include name="*.jar"/>
            </lib>
        </war>
        
        <!-- Deploy to Tomcat -->
        <copy file="${dist.dir}/${war.name}" todir="${deploy.dir}"/>
        <echo message="WAR deployed to: ${deploy.dir}/${war.name}"/>
    </target>
    
    <!-- Default target -->
    <target name="default" depends="war"/>
    
    <import file="nbproject/build-impl.xml"/>
    <!--

    There exist several targets which are by default empty and which can be 
    used for execution of your tasks. These targets are usually executed 
    before and after some main targets. They are: 

      -pre-init:                 called before initialization of project properties 
      -post-init:                called after initialization of project properties 
      -pre-compile:              called before javac compilation 
      -post-compile:             called after javac compilation 
      -pre-compile-single:       called before javac compilation of single file
      -post-compile-single:      called after javac compilation of single file
      -pre-compile-test:         called before javac compilation of JUnit tests
      -post-compile-test:        called after javac compilation of JUnit tests
      -pre-compile-test-single:  called before javac compilation of single JUnit test
      -post-compile-test-single: called after javac compilation of single JUunit test
      -pre-dist:                 called before archive building 
      -post-dist:                called after archive building 
      -post-clean:               called after cleaning build products 
      -pre-run-deploy:           called before deploying
      -post-run-deploy:          called after deploying

    Example of pluging an obfuscator after the compilation could look like 

        <target name="-post-compile">
            <obfuscate>
                <fileset dir="${build.classes.dir}"/>
            </obfuscate>
        </target>

    For list of available properties check the imported 
    nbproject/build-impl.xml file. 


    Other way how to customize the build is by overriding existing main targets.
    The target of interest are: 

      init-macrodef-javac:    defines macro for javac compilation
      init-macrodef-junit:   defines macro for junit execution
      init-macrodef-debug:    defines macro for class debugging
      do-dist:                archive building
      run:                    execution of project 
      javadoc-build:          javadoc generation 

    Example of overriding the target for project execution could look like 

        <target name="run" depends="<PROJNAME>-impl.jar">
            <exec dir="bin" executable="launcher.exe">
                <arg file="${dist.jar}"/>
            </exec>
        </target>

    Notice that overridden target depends on jar target and not only on 
    compile target as regular run target does. Again, for list of available 
    properties which you can use check the target you are overriding in 
    nbproject/build-impl.xml file. 

    -->
</project>
